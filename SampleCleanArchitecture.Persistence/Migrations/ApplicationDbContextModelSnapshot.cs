// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleCleanArchitecture.Persistence;

#nullable disable

namespace SampleCleanArchitecture.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SampleCleanArchitecture.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("f5f3b3d3-3b4b-4b1e-8f4b-6f1f3f3f3f3f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Black Pink"
                        },
                        new
                        {
                            CategoryId = new Guid("f5f3b3d3-3b4b-4b1e-8f4b-6f1f3f3f3f3e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Red Velvet"
                        },
                        new
                        {
                            CategoryId = new Guid("f5f3b3d3-3b4b-4b1e-8f4b-6f1f3f3f3f3d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Twice"
                        },
                        new
                        {
                            CategoryId = new Guid("f5f3b3d3-3b4b-4b1e-8f4b-6f1f3f3f3f3c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mamamoo"
                        });
                });

            modelBuilder.Entity("SampleCleanArchitecture.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("b776c4cc-0cbf-43d1-9e0e-4967010e2c2d"),
                            Artist = "Black Pink",
                            CategoryId = new Guid("f5f3b3d3-3b4b-4b1e-8f4b-6f1f3f3f3f3f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 5, 4, 14, 57, 7, 286, DateTimeKind.Local).AddTicks(3910),
                            Description = "Black Pink Concert",
                            ImageUrl = "",
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Black Pink Concert",
                            Price = 10000
                        },
                        new
                        {
                            EventId = new Guid("a685670b-9eea-478c-a638-50dc5d623e66"),
                            Artist = "Red Velvet",
                            CategoryId = new Guid("f5f3b3d3-3b4b-4b1e-8f4b-6f1f3f3f3f3e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 6, 4, 14, 57, 7, 286, DateTimeKind.Local).AddTicks(3926),
                            Description = "Red Velvet Concert",
                            ImageUrl = "",
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Red Velvet Concert",
                            Price = 10000
                        },
                        new
                        {
                            EventId = new Guid("2135c8a5-db1f-4f92-8c47-f13370912d55"),
                            Artist = "Twice",
                            CategoryId = new Guid("f5f3b3d3-3b4b-4b1e-8f4b-6f1f3f3f3f3d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 7, 4, 14, 57, 7, 286, DateTimeKind.Local).AddTicks(3929),
                            Description = "Twice Concert",
                            ImageUrl = "",
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Twice Concert",
                            Price = 10000
                        },
                        new
                        {
                            EventId = new Guid("13e46046-0d38-472a-b868-b40e80921a66"),
                            Artist = "Mamamoo",
                            CategoryId = new Guid("f5f3b3d3-3b4b-4b1e-8f4b-6f1f3f3f3f3c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2024, 7, 4, 14, 57, 7, 286, DateTimeKind.Local).AddTicks(3931),
                            Description = "Mamamoo Concert",
                            ImageUrl = "",
                            LastModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mamamoo Concert",
                            Price = 10000
                        });
                });

            modelBuilder.Entity("SampleCleanArchitecture.Domain.Entities.Event", b =>
                {
                    b.HasOne("SampleCleanArchitecture.Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SampleCleanArchitecture.Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
